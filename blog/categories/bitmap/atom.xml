<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bitmap | sparkrico's Blog]]></title>
  <link href="http://sparkrico.github.com/blog/categories/bitmap/atom.xml" rel="self"/>
  <link href="http://sparkrico.github.com/"/>
  <updated>2012-11-07T23:46:15+08:00</updated>
  <id>http://sparkrico.github.com/</id>
  <author>
    <name><![CDATA[sparkrico]]></name>
    <email><![CDATA[sparkrico@yahoo.com.cn]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Caching Bitmaps]]></title>
    <link href="http://sparkrico.github.com/blog/2012/11/06/android-caching-bitmaps/"/>
    <updated>2012-11-06T23:57:00+08:00</updated>
    <id>http://sparkrico.github.com/blog/2012/11/06/android-caching-bitmaps</id>
    <content type="html"><![CDATA[<p>``` java setting up
private LruCache mMemoryCache;
@Override
protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>...
// Get memory class of this device, exceeding this amount will throw an
// OutOfMemory exception.
final int memClass = ((ActivityManager) context.getSystemService(
        Context.ACTIVITY_SERVICE)).getMemoryClass();

// Use 1/8th of the available memory for this memory cache.
final int cacheSize = 1024 * 1024 * memClass / 8;

mMemoryCache = new LruCache(cacheSize) {
    @Override
    protected int sizeOf(String key, Bitmap bitmap) {
        // The cache size will be measured in bytes rather than number of items.
        return bitmap.getByteCount();
    }
};
...
</code></pre>

<p>}</p>

<p>public void addBitmapToMemoryCache(String key, Bitmap bitmap) {</p>

<pre><code>if (getBitmapFromMemCache(key) == null) {
    mMemoryCache.put(key, bitmap);
}
</code></pre>

<p>}</p>

<p>public Bitmap getBitmapFromMemCache(String key) {</p>

<pre><code>return mMemoryCache.get(key);
</code></pre>

<p>}
```</p>

<p>``` java loadBitmap
public void loadBitmap(int resId, ImageView imageView) {</p>

<pre><code>final String imageKey = String.valueOf(resId);

final Bitmap bitmap = getBitmapFromMemCache(imageKey);
if (bitmap != null) {
    mImageView.setImageBitmap(bitmap);
} else {
    mImageView.setImageResource(R.drawable.image_placeholder);
    BitmapWorkerTask task = new BitmapWorkerTask(mImageView);
    task.execute(resId);
}
</code></pre>

<p>}
```</p>

<p>```java asynctask
class BitmapWorkerTask extends AsyncTask {</p>

<pre><code>...
// Decode image in background.
@Override
protected Bitmap doInBackground(Integer... params) {
    final Bitmap bitmap = decodeSampledBitmapFromResource(
            getResources(), params[0], 100, 100));
    addBitmapToMemoryCache(String.valueOf(params[0]), bitmap);
    return bitmap;
}
...
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
